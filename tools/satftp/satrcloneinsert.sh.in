#!%SHELL%
#
# Usage: satrcloneinsert [-C] [-b] [-v] [-i] [-d <nbsp_spool_dir>] \
#    [-f <nbsp_infifo>] <zone_asc_file>
#
# Send the asc zone file given in the cmd line to nbsp, using nbspinsert.
# If [-i] is not given, then the file is copied to the spool directory
# and then nbspinsert is called. Otherwise the [-i] is passed to nbspinsert,
# who takes care of copying the file to the spool directory.
#
# NOTE: The files are not removed from the spool directory by the
#       mechanism that nbsp uses while processing the noaaport files.
#       They must be removed by the cleanup script or some other procedure.
#
# Example:
#   satrcloneinsert z02.abi-l1b-radf-m6c01-g19.20250706_1810.asc
#   satrcloneinsert -i z02.abi-l1b-radf-m6c01-g19.20250706_1810.asc
#
# -b => background
# -v => verbose
# -i => flag passed to nbspinsert
# -C => do not call nbspinsert; print the calling arguments
#
log_msg(){

    if [ $gbackground -eq 1 ]
    then
        logger -t $gname "$1"
    else
        echo "$1"
    fi
}

log_verbose (){

    [ $gverbose -eq 1 ] && log_msg "$1"
}

log_msg_quit(){

    log_msg "$1"
    exit 0
}

log_err(){

    log_msg "$1"
}

log_err_quit(){

    log_msg "$1"
    exit 1
}

#
# functions to construct the nbsp spool file name
#
get_parts (){
    #
    # The argument should be the name of a zone asc file; e.g.,
    #
    #   z02.abi-l1b-radf-m6c01-g19.20250706_1810.asc
    #
    file=$1

    set `echo $file | tr '.' ' '`
    [ $# -ne 4 ] && { echo "Invalid input file name."; exit 1; }

    zone=`echo $1 | cut -c 2,3`
    fname=$2
    ymd_hm=$3

    # the dhm
    hm=`echo $ymd_hm | cut -c 10-13`
    d=`echo $ymd_hm | cut -c 7,8`
    dhm=${d}${hm}

    # the sat name and channel
    set `echo $fname | tr '-' ' '`
    sat=`echo $5 | cut -c 2,3`
    ch=`echo $4 | cut -c 4,5`
    
    # set the global variables
    rc_hm=$hm
    rc_d=$d
    rc_dhm=$dhm
    rc_sat=$sat
    rc_ch=$ch
    rc_zone=$zone
}

get_seqnum_hhmmssmm (){

    # current msecond
    msec=`date -u +%N | cut -c 1-3`

    # current time since midnight (hhmmss)
    time=`date +%H%M%S`

    # append the msec
    time="${time}${msec}"

    rc_seqnum=$time

    ##
    ## test
    ##
    ## for i in 1 2 3 4
    ## do
    ##   get_seqnumhhmmssmm
    ##	 echo $rc_seqnum
    ## done
    ##
}

get_seqnum_msec (){

    # current hour
    hour=`date +%H`

    # current minute
    min=`date +%M`

    # current sec
    sec=`date +%S`

    # current msecond
    msec=`date -u +%N | cut -c 1-3`

    # use bc to handle 0-padded numbers
    msecs=`echo "($hour * 3600 + $min * 60 + $sec) * 1000 + $msec" | bc`

    rc_seqnum=$msecs

    ##
    ## test
    ##
    ## for i in 1 2 3 4
    ## do
    ##   get_seqnum
    ##	 echo $rc_seqnum
    ## done
    ##
}

get_nbsp_spool_name (){
    #
    # Uses the rc_ variables from get_parts() and get_seqnum().
    # For an input like
    #
    #   z02.abi-l1b-radf-m6c03-g19.20250706_1810.asc
    #
    # the output is like
    #
    #   aw01_c03g19+z02.<ddhhmm>_<seq>.asc (01 => or-abi-l1b-radf-m6)
    #
    rc_station="aw01"
    rc_wmoid="c${rc_ch}g${rc_sat}"
    rc_nawips="z${rc_zone}"

    # the nbsp spool name
    rc_fname="${rc_station}_${rc_wmoid}+${rc_nawips}"
    rc_fext="${rc_dhm}_${rc_seqnum}"
    rc_fbasename="${rc_fname}.${rc_fext}"

    rc_fpath="${gnbspspooldir}/${rc_station}/${rc_fbasename}"
}

#
# main functions
#
satrcloneinsert_init_dirs() {

    [ ! -d ${gnbspspooldir} ] && \
	{ echo "${gnbspspooldir} does not exist."; exit 1; }

    savedir=`pwd`
    cd $gnbspspooldir

    mkdir -p $rc_station

    cd $savedir
}    

satrcloneinsert_exit() {

    # normal cleanup
    satrcloneinsert_cleanup

    # in case of error or interrupt clean partial files
}

satrcloneinsert_quit() {

    # response to a quit,... signal.
    gquit=1
    exit
}

satrcloneinsert_cleanup() {

    # nothing for the moment
    :
}

gname="`basename $0`"
#
# configuration
#
gnbspspooldir="/var/noaaport/nbsp/spool"
gnbspinfifo=

# options
gverbose=0	# [-v]
gbackground=0	# [-b]
opt_i=0		# [-i]
opt_C=0		# [-C]

# variables
gascfile=

#
# main
#
usage="satrcloneinsert [-C] [-b] [-v] [-i] [-d <nbsp_spool_dir>] \
		       [-f <nbsp_infifo>] <zone_asc_file>"

while getopts ":hCbvid:" option
do
    case $option in
        h) echo "$usage"; exit 0;;
	C) opt_C=1;;
        b) gbackground=1;;
	v) gverbose=1;;
	i) opt_i=1;;
	d) gnbspspooldir=$OPTARG;;
	f) gnbspinfifo=$OPTARG;;
        \?) echo "Unsupported option $OPTARG"; exit 1;;
	:) echo "Missing value option $OPTARG"; exit 1;;
    esac
done
shift $((OPTIND-1))

[ $# -eq 0 ] && { echo "asc file?"; exit 1; }
gascfile=$1

# check the inputfile (if not testing)
if [ $opt_C -eq 0 ]
then
    [ ! -f $gascfile ] && { echo "$gascfile not found."; exit 1; }
fi

get_parts `basename $gascfile`
get_seqnum_msec
get_nbsp_spool_name

# exit clean
trap satrcloneinsert_exit EXIT
trap satrcloneinsert_quit HUP INT QUIT ABRT KILL ALRM TERM

#
# nbspinsert expects the arguments
#
#   seq type cat code npchidx fname fpath
#
cmdopts="${rc_seqnum} 0 0 0 0 ${rc_fname} ${rc_fpath}"
[ -n "$gnbspinfifo" ] && cmdopts="-f $gnbspinfifo $cmdopts"

if [ $opt_C -eq 1 ]
then
    echo $cmdopts
    exit 0
fi

# create subdirectories (spool dir must exist)
satrcloneinsert_init_dirs

# process
if [ $opt_i -eq 1 ]
then
    nbspinsert -i $cmdopts < $gascfile
else
    cp $gascfile $rc_fpath
    nbspinsert $cmdopts
fi
