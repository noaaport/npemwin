#!%SHELL%
#
# Usage: satrclone [-b] [-v] [-e] [-k] [-n] [-c <chlist>]
#                  [-w <workdir>] <zones.list>
#
# -b => run in the background
# -v => verbose as it processes files
# -e => erase (remove the contents of) the workdir when start
# -k => do not delete the auxiliary files (in tmp dir)
# -n => do not generate the asc files (only download)
# -c => specify the channels to include (see below)
# -f => specify an rclone.conf file
#
# Requires in "~/.config/rclone/rclone.conf"
#
#  [publicaws]
#  type = s3
#  provider = AWS
#
# - It downloads the files like
#   OR_ABI-L1b-RadF-M6C01_G19_s20251802100207_e20251802109516_c20251802109562.nc
#
# - The files are saved locally as
#     abi-l1b-radf-m6c01-g19.20250629_2100.nc
#
# - The corresponding asc file is generated (by calling nbpgoesrgis)
#     abi-l1b-radf-m6c01-g19.20250629_2100.asc
#
# - Each of the files is then "cut" to generate the asc file for each zone
#   defined in the files "zones.list".
#
# - The [-c] option can be used to specify the list of channels to include.
#   The default is all the channels: 01 02 .... 16.
#   The argument to the [-c] option is a comma-separated list of ranges.
#   For example, specifying
#
#      -c 1-1,4-4,6-16
#
#    will download the files corresponding to the channels in the list
#
#       01 04 06 07 08 ... 16

log_msg(){

    if [ $gbackground -eq 1 ]
    then
        logger -t $gname "$1"
    else
        echo "$1"
    fi
}

log_verbose (){

    [ $gverbose -eq 1 ] && log_msg "$1"
}

log_msg_quit(){

    log_msg "$1"
    exit 0
}

log_err(){

    log_msg "$1"
}

log_err_quit(){

    log_msg "$1"
    exit 1
}

#
# The functions get_xxx() below construct the local name from the remote name
#
get_parts() {
    #
    # The input is of the form
    # OR_ABI-L1b-RadF-M6C01_G16_\
    #  s20243411710207_e20243411719515_c20243411719563.nc
    #
    name=$1
    _numparts=`echo $name | tr "_" "\n" | wc -l`  # not used (should give 6)

    _prefix=`echo $name | cut -d "_" -f 2`	# ABI-L1b-RadF-M6C01
    _channel=`echo ${_prefix} | cut -c 17,18`

    _sat=`echo $name | cut -d "_" -f 3`	# G16

    dtpart=`echo $name | cut -d "_" -f 4`	# use the the start time
    _yyyy=`echo $dtpart | cut -c 2-5`
    _ddd=`echo $dtpart | cut -c 6-8`
    _hh=`echo $dtpart | cut -c 9,10`
    _mm=`echo $dtpart | cut -c 11,12`

    # convert to yyyymmdd
    os=`uname`
    if [ $os = "Linux" ]
    then
	__ddd=`expr ${_ddd} - 1`
	_yyyymmdd=`date -u -d "${_yyyy}0101 + ${__ddd} days" +%Y%m%d`
    else
	_yyyymmdd=`date -j -u -f %Y%j ${_yyyy}${_ddd} +%Y%m%d`
    fi

    #echo $_prefix
    #echo $_channel
    #echo $_sat
    #echo $_yyyy
    #echo $_ddd
    #echo $_hh
    #echo $_mm

    rc_prefix=${_prefix}
    rc_channel=${_channel}
    rc_sat=${_sat}
    rc_yyyy=${_yyyy}
    rc_ddd=${_ddd}
    rc_hh=${_hh}
    rc_mm=${_mm}
    rc_yyyymmdd=${_yyyymmdd}
}

get_local_name() {

    remotename=$1
    
    get_parts $remotename
    localname="${rc_prefix}-${rc_sat}.${rc_yyyymmdd}_${rc_hh}${rc_mm}"

    echo $localname | tr '[A-Z]' '[a-z]'
}

#
# the next two functions are used to convert the input string of channel ranges,
# if it is specified. The default is all the channels 01 - 16
#
range_to_spacelist () {
    #
    # The input is a dash separated string, then converted to a space
    # separated string that is input to seq. (Single digit integers are
    # padded with a zero in the output.)
    #
    range=$1
    set `echo $range | tr "-" " "`
    first=$1
    last=$2

    nlist=`seq -s " " $first $last`

    nnlist=
    for n in $nlist
    do
	nn=`printf "%02d" $n`
	nnlist="$nnlist $nn"
    done

    echo $nnlist
}

rangelist_to_spacelist () {
    #
    # The input is a comma separated string of "ranges". Each range
    # is converted to a space separated sequence with "seq" (via the
    # function range_to_spacelist ().
    #
    # Example: convert a list of the form
    #
    # 1-1,3-5,9-9
    #
    # to
    #
    # 01 03 04 05 09
    #
    rangelist=$1

    # initialize the final list
    nnlist=
    
    # get each range in the comma-separated list
    for range in `echo $rangelist | tr "," " "`
    do
	# convert each range with "seq"
	spacelist=`range_to_spacelist $range`

	# add it to the final list
	nnlist="$nnlist $spacelist"
    done

    echo $nnlist
}

#
# Test
#
## [ $# -eq 0 ] && { echo "list?"; exit 1; }
## rangelist=$1
## 
## nnlist=`rangelist_to_spacelist $rangelist`
## echo $nnlist
##
##

#
# main functions
#
satrclone_init_dirs() {

    [ ! -d ${gworkdir} ] && { echo "${gworkdir} does not exist."; exit 1; }

    _savedir=`pwd`
    cd ${gworkdir}

    for d in $gncdir $gascdir $gimgdir $gtmpdir $gqdir
    do
	[ $opt_e -eq 0 ] || rm -rf $d
	[ ! -d $d ] && mkdir -p $d
    done

    cd ${_savedir}

    [ $opt_w -eq 0 ] && return
    
    gncdir=${gworkdir}/${gncdir}
    gascdir=${gworkdir}/${gascdir}
    gimgdir=${gworkdir}/${gimgdir}
    gtmpdir=${gworkdir}/${gtmpdir}
    gqdir=${gworkdir}/${gqdir}
    #
    gremotelist=${gworkdir}/${gremotelist}
    glocallist=${gworkdir}/${glocallist}
    gascqfile=${gworkdir}/${gascqfile}
}

satrclone_exit() {

    # normal cleanup
    satrclone_cleanup

    # in case of error or interrupt clean partial files
}

satrclone_quit() {

    # response to a quit,... signal.
    gquit=1
    exit
}

satrclone_cleanup() {

    [ $opt_k -eq 1 ] || rm -f $gremotelist $glocallist
}

satrclone_download() {

    os=`uname`	# Linux or BSD
    
    # get today's date as yyyy/ddd/hh (and yyyymmdd_hhmm)
    now=`date +%s`

    # If the current minute is less than 10, we use the previous hour.
    # Although the minute is returned with a leading zero when it
    # is less than 10, the -lt should work correctly.
    #
    currmin=`date +%M`
    if [ $currmin -lt 10 ]
    then
	now=`expr $now - 600`
    fi

    # convert "now" to yyyy/ddd/hh (and yyyymmdd_hhmm)
    if [ $os = "Linux" ]
    then
	ydh=`date -u -d "@${now}" +%Y/%j/%H`
	dt=`date -u -d "@${now}" +%Y%m%d_%H%M`
    else
	ydh=`date -j -u -f %s $now +%Y/%j/%H`
	dt=`date -j -u -f %s $now +%Y%m%d_%H%M`
    fi

    gncqfile="${gqdir}/${dt}.ncq"
    gascqfile="${gqdir}/${dt}.ascq"

    rclone_opts=
    [ -n "$grcloneconf" ] && rclone_opts="--config=$grcloneconf"

    # Use lsf instead of ls to omit the size.
    rclone $rclone_opts lsf ${gurl}/${ydh} > $gremotelist

    for nn in $gchlist
    do
	ch="C${nn}"
	last=`grep $ch $gremotelist | tail -n 1`
	[ -z "$last" ] && { log_verbose "No ${ch}/${ydh} file"; continue; }
	
	name=`get_local_name $last`
	localname="${name}.nc"

	if [ -f $localname ]
	then
	    log_verbose "exists: $last"
	else
	    log_verbose "downloading: $last"
	    rclone $rclone_opts copy ${gurl}/${ydh}/${last} $gncdir
	    mv $gncdir/$last $gncdir/$localname
	    echo $gncdir/$localname >> $glocallist
	fi
    done

    # Rename the locallist
    mv $glocallist $gncqfile
}

satrclone_genasc() {
    #
    # First call nbspgoesrgis to generate the (global) asc file.
    # Then call nbspgoesrasc to generate the asc file for each
    # zone in the zones file.
    #
    while read line
    do
	fbasename=`basename $line`
	fname=`basename $line ".nc"`

	# Generate the (global) asc file
	log_verbose "generating asc for $fname"
	nbspgoesrgis -r -a ${gascdir}/${fname}.asc ${gncdir}/${fname}.nc

	if [ $? -eq 0 ]
	then
	    # Generate the asc file for each zone
	    # Pass [-q] to output the name of each file produced
	    log_verbose "cutting asc $fname"
	    nbspgoesrasc -q -p ${gascdir}/z -s ".${fname}.asc" \
			 ${gascdir}/${fname}.asc < $gzonelist >> $glocallist
	fi
    done < $gncqfile

    # Rename the nc qlist file
    mv $gncqfile "${gncqfile}.i"
    
    # Rename the q file of the asc files generated
    mv $glocallist $gascqfile
}

gname="`basename $0`"
#
# configuration
#
gurl="publicaws:noaa-goes19/ABI-L1b-RadF"

#
# defaults
#
gchrangelist="1-16"
gchlist="01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16"
#
gworkdir="."
# these are relative to gworkdir
gncdir="nc"
gascdir="asc"
gimgdir="img"
gtmpdir="tmp"
gqdir="q"
#
gremotelist="${gtmpdir}/remote.list"
glocallist="${gtmpdir}/local.list"
gzonelist=
#

# options
gbackground=0	# [-b]
gverbose=0	# [-v]
grcloneconf=	# [-f]

# variables
gquit=0		# set when if a quit,... signal is received, or error.
gncqfile=	# defined in the download function
gascqfile=	# defined in the download function
#
opt_e=0		# set if [-e] is given (clean the workdir)
opt_k=0
opt_n=0
opt_c=0		# set if [-c] is given
opt_w=0		# set if [-w] is given

#
# main
#
usage="satrclone [-bvekn] [-c <chlist>] [-w <workdir> <zones.list>"

while getopts ":hbveknc:f:w:" option
do
    case $option in
        h) echo "$usage"; exit 0;;
        b) gbackground=1;;
	v) gverbose=1;;
	e) opt_e=1;;
	k) opt_k=1;;
	n) opt_n=1;;
	c) gchrangelist=$OPTARG; opt_c=1;;
	f) grcloneconf=$OPTARG;;
	w) gworkdir=$OPTARG; opt_w=1;;
        \?) echo "Unsupported option $OPTARG"; exit 1;;
	:) echo "Missing value option $OPTARG"; exit 1;;
    esac
done
shift $((OPTIND-1))

if [ $opt_n -eq 0 ]
then
    [ $# -eq 0 ] && { echo "zone file?"; exit 1; }
    gzonelist=$1

    # sanity check
    [ -f $gzonelist ] || { echo "Not found: $gzonelist"; exit 1; }
fi

# If the channels ranges list is given, convert to a space list
[ $opt_c -eq 0 ] || gchlist=`rangelist_to_spacelist $gchrangelist`

# redefine the working directories
satrclone_init_dirs
    
# exit clean
trap satrclone_exit EXIT
trap satrclone_quit HUP INT QUIT ABRT KILL ALRM TERM

# remove old lists if they exist
## satrclone_cleanup
rm -f $gremotelist $glocallist

# download
satrclone_download

# convert each nc to asc
[ $opt_n -eq 1 ] || satrclone_genasc
