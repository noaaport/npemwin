#!%SHELL%
#
# usage: emftp [-b] [-c] [-i] [-f userconffile]
#
# The [-b] option runs in background mode (error reports to syslog)
#
# The [-c] option will create the working directories used by emftp,
# as defined in the configuration file, and exit.
#
# The [-i] option will download the image files; otherwise the txt files.
#
# The original txt file names are of the form
#
#       A_FNUS82KILM111849_C_KWIN_20200311184946_406176-3-FWMILMNC.TXT
#
# and it is renamed as
#
#       fwmilmnc.20200311.184946.txt
#
# This file has:
#
#       FNUS82 KILM 111849
#       FWMILM
#
# The names are constructed as:
#
#	bbfbasename: fwmilmnc.txt
#
# For the images, the original names are
#
# Z_QAEA00TJSJ041130_C_KWIN_20220804233035_529673-3-RADALLPR.GIF
# Z_EIPU00KWBC041130_C_KWIN_20220804233034_529667-4-IMGSJUPR.JPG
# Z_QGTA98KWNS041130_C_KWIN_20220804233034_529668-4-IMGWWAUS.PNG
#
# They are renamed as
#
# radallpr.20220804.233035.gif
# imgsjupr.20220804.233034.jpg
# imgwwaus.20220804.233034.png
#
#	bbfbasename: imgwwaus.png

#
# functions
#

log_msg(){

    if [ $gbackground -eq 1 ]
    then
	logger -t emftp "$1"
    else
	echo "emftp: $1"
    fi
}

log_msg_quit(){

    log_msg "$1"
    exit 0
}

log_err(){

    log_msg "$1"
}

log_err_quit(){

    log_msg "$1"
    exit 1
}

cleanup(){
    
    rm -f $ginputfpath
    rm -f $gtmpdir/*

    unlock_dir $glockdirpath
    log_msg "finished"
}

lock_dir(){

    lockdir=$1
    sleepsecs=$2
    maxloops=$3
    
    mkdir $lockdir > /dev/null 2>&1
    status=$?
    nloop=1
    while [ $status -ne 0 -a $nloop -le $maxloops ]
    do
	nloop=`expr $nloop + 1`
	log_msg "Waiting for release of $lockdir"
	sleep $sleepsecs
	mkdir $lockdir > /dev/null 2>&1
	status=$?
    done

    if [ $status -ne 0 ]
    then
	log_err_quit "Cannot lock $lockdir"
    fi
}

unlock_dir(){

    lockdir=$1
    
    [ -d $lockdir ] && rmdir $lockdir
}

get_number_parts(){

    # This should be 6
    echo $1 | tr "_" "\n" | wc -l
}

get_parts(){

    _name=`echo $1 | tr A-Z a-z`

    _first_component=`echo $_name | cut -d "_" -f 2`
    _second_component=`echo $_name | cut -d "_" -f 5`
    _last_component=`echo $_name | cut -d "_" -f 6`

    # The components are things like
    # first: qgti98kwnh120115
    # second: 20221112131522
    # last: 706008-4-mod96fbw.gif

    ## Old - Delete
    # rc_seqnum=`echo $_last_component | cut -c 1-6`
    # rc_bbfbasename=`echo $_last_component | cut -c 10-21`
    # rc_emname=`echo $_last_component | cut -c 10-17`
    # rc_ext=`echo $_last_component | cut -c 19-21`
    ## 

    rc_seqnum=`echo $_last_component | cut -d "-" -f 1`
    rc_bbfbasename=`echo $_last_component | cut -d "-" -f 3`
    rc_emname=${rc_bbfbasename%.*}
    rc_ext=${rc_bbfbasename##*.}
    rc_awips=`echo $rc_emname | cut -c 1-6`
    
    rc_wmoid=`echo $_first_component | cut -c 1-6`
    rc_wmostation=`echo $_first_component | cut -c 7-10`
    rc_wmotime=`echo $_first_component | cut -c 11-16`

    rc_yyyymmdd=`echo $_second_component | cut -c 1-8`
    rc_hhmmss=`echo $_second_component | cut -c 9-14`

    if [ $rc_ext = "txt" ]
    then
	rc_ftype="txt"
    else
	rc_ftype="img"
    fi
}

get_ftype(){

    echo $rc_ftype
}

get_parentsubdir(){

    # must be used after calling get_parts()
    
    # CHANGED FOR IMG
    echo ${rc_ftype}/${rc_wmostation}
}

get_emfbasename(){
    
    # must be used after calling get_parts()

    # CHANGED FOR IMG

    # echo ${rc_emname}.${rc_seqnum}.${rc_ext}
    echo ${rc_emname}.${rc_yyyymmdd}.${rc_hhmmss}.${rc_ext}
}

get_bbfbasename(){

    # e.g., fwmilmnc.txt, imgwwaus.png
    
    echo ${rc_bbfbasename}
}

sanity_check(){

    #
    #[ ! -d $out_dirname ] && \
    #	{ logger -t qrunner "$out_dirname not found. Exiting."; exit 1; }
    #

    # checks
    for _d in inputs spool inv lock tmp
    do
	eval _dir=\$g${_d}dir
	[ ! -d ${_dir} ] && { log_err_quit "${_dir} does not exist"; }
    done
}

check_name(){

    _status=0
    
    # Minimal check that the file name has the correct form

    echo ${rc_emname} | grep -q "[^[:alnum:]]" -
    if [ $? -eq 0 ]
    then
	log_msg "Invalid file name: unexpected characters: $rc_emname"

	return 1
    fi

    if [ ${#rc_emname} -ne 8 -o ${#rc_bbfbasename} -ne 12 ]
    then
	log_msg "Invalid file name: wrong number of characters: $rc_bbfbasename"

	return 1
    fi

    return ${_status}
}

#
# configuration file
#
gconffile="emftp.conf"
gconfdir="%EMFTPCONFDIR%"
gconfoptdirs="${gconfdir}/defaults ${gconfdir}/site"

#
# input configuration
#
gurl="https://tgftp.nws.noaa.gov/SL.us008001/CU.EMWIN/DF.xt/DC.gsatR/OPS"
ginputfilename_txt="txtmin02.zip"
ginputfilename_img="imgmin15.zip"  # CHANGED IMG

#
# options
#
#
gbackground=0
gremove_emfpath=1
gwrite_inv=0
#
gworkdir="/var/npemwin/emftp"
ginputssubdir="inputs"
gspoolsubdir="spool"
ginvsubdir="inv"
gtmpsubdir="tmp"
glocksubdir="lock"
glockname="emftp.lock"		# name of dir we will use for locking
glocksleepsecs=5
glockmaxloops=3			# max number of tries to get the lock
gmd5keyfile="md5.txt"
ginvfilename="`date -u +%H`.txt"
gtime="`date -u +%H%M`"           # for entry in inv file

#
# Nbsp and Npemwin processing
#
npemwin_enable=1
gnpemwin_infifo="/var/run/npemwin/infeed.fifo"
gnpemwininsert="npemwininsert"	# assume it is in PATH
#
# Since we use mcast it is ok (will not give an error) to set this to 1
# even if nbsp is not running. Note that the "qrunner.conf" has a similar
# setting (by default 0), so we could enabled that one instead of this one
# (but not both).
#
nbsp_enable=1		    
gnbspmcast="nbspmcast"	    # assume it is in PATH

#
# main
#

usage="usage: emftp [-b] [-c] [-i] [-f userconffile]"
option_c=0
option_i=0
option_f=0
while getopts ":hbcif:" option
do
    case $option in
	h) echo "$usage"; exit 0;;
	b) gbackground=1;;
	c) option_c=1;;
	i) option_i=1;;
	f) userconffile=$OPTARG; option_f=1;;
        \?) echo "Unsupported option $OPTARG"; exit 1;;
	:) echo "Missing value option $OPTARG"; exit 1;;
    esac
done
shift $((OPTIND-1))

if [ $option_f -eq 1 ]
then
    . $userconffile
else
    [ -f ${gconfdir}/${gconffile} ] && . ${gconfdir}/${gconffile}
fi

if [ $option_c -eq 1 ]
then
    mkdir -p ${gworkdir}
    cd ${gworkdir}

    for d in $ginputssubdir $ginvsubdir $gspoolsubdir \
	     $gtmpsubdir $glocksubdir
    do
	mkdir -p $d
    done

    return
fi

if [ $option_i -eq 1 ]
then
    ginputfilename=${ginputfilename_img}
else
    ginputfilename=${ginputfilename_txt} # default
fi

# variables
ginputsdir=${gworkdir}/${ginputssubdir}
gspooldir=${gworkdir}/${gspoolsubdir}
ginvdir=${gworkdir}/${ginvsubdir}
glockdir=${gworkdir}/${glocksubdir}
gtmpdir=${gworkdir}/${gtmpsubdir}
#
ginputfpath=${ginputsdir}/${ginputfilename}
gmd5keyfpath=${ginputsdir}/${gmd5keyfile}
ginvfpath=${ginvdir}/${ginvfilename}
glockdirpath=${glockdir}/${glockname}
#

# checks
sanity_check

# run once
lock_dir $glockdirpath $glocksleepsecs $glockmaxloops

trap cleanup HUP INT QUIT ABRT KILL ALRM TERM EXIT

log_msg "starting"

# If curl gives an error, quit. If unzip gives an error, re-download and
# retry unzip, once.
count=0
while [ $count -le 1 ]
do
    count=`expr $count + 1`
    errmsg=`curl -s -S -o ${ginputfpath} -m 20 --retry 1 \
    		 ${gurl}/${ginputfilename} 2>&1`
    [ $? -ne 0 ] && { log_err_quit "Error from curl: $errmsg"; }

    oldmd5key=
    [ -f $gmd5keyfpath ] && { oldmd5key=`cat $gmd5keyfpath`; }
    # [ -f $ginvfpath ] && \
    #    { oldmd5key=`tail -n 1 ${ginvfpath} | cut -f 2 -d ' '`; }
    md5key=`openssl md5 ${ginputfpath} | cut -f 2 -d ' '` 

    if [ $md5key = "$oldmd5key" ]
    then
	rm $ginputfpath
	log_msg_quit "Not a new file"
    fi

    errmsg=`unzip -d $gtmpdir $ginputfpath 2>&1`
    if [ $? -eq 0 ]
    then
	status=0
	break
    else
	status=1
	log_err "Error unziping $ginputfpath: $errmsg"
    fi
done

[ $status -ne 0 ] && { log_err_quit "Retrying download and unzip failed"; }

# Some files are sent compressed (.zip). The npemwin qrunner will
# accept those and handle them. But nbsp expects the txt uncompressed files.
# For uniformity we decompress them once and for all here.
#
_savedir=`pwd`
cd $gtmpdir
_zipfilelist=`find . -name "*.ZIP"`
if [ -n "${_zipfilelist}" ]
then
    for _f in ${_zipfilelist}
    do
	#[ "${_f}" = "" ] && break
	unzip ${_f} > /dev/null 2>&1
	[ $? -ne 0 ] && { log_err "Error unziping ${_f}"; }
	rm ${_f}
    done
fi
cd ${_savedir}

for f in $gtmpdir/*
do
    number_parts=`get_number_parts $f`
    if [ $number_parts -ne 6 ]
    then
	log_err "Invalid file name: unexpected number of parts: $f"
	rm $f
	continue
    fi
    
    # Define the rc_xxx variables
    get_parts `basename $f`

    # These functions need the rc_xxx variables
    emfbasename=`get_emfbasename`
    parentsubdir=`get_parentsubdir`
    ftype=`get_ftype`
    bbfbasename=`get_bbfbasename`

    parentdir=${gspooldir}/${parentsubdir}
    emfpath=${parentdir}/${emfbasename}

    # Minimal check that the file name has the correct form
    check_name
    _status=$?
    if [ ${_status} -ne 0 ]
    then
	rm $f
	continue
    fi

    mkdir -p $parentdir
    mv $f $emfpath

    #
    # Process npemwin
    #
    if [ $npemwin_enable -eq 1 ]
    then
	$gnpemwininsert -b -f $gnpemwin_infifo $bbfbasename $emfpath
	_status=$?
	if [ ${_status} -ne 0 ]
	then
	    log_err "Error from npemwininsert processing $emfpath"
	fi
    fi

    if [ $nbsp_enable -eq 1 -a $ftype = "txt" ]
    then
	$gnbspmcast -b -s $rc_seqnum $emfpath
	_status=$?
	if [ ${_status} -ne 0 ]
	then
	    log_err "Error from nbspmcast processing $emfpath"
	fi
    fi

    #
    # Remove it here, or setup a schedule to remove them periodically.
    # In the default configuration they are under
    # /var/npemwin/emftp/spool/txt/<station>
    #
    if [ $gremove_emfpath -eq 1 ]
    then
	rm -f $emfpath
    fi
done

echo $md5key > ${gmd5keyfpath}
[ $gwrite_inv -eq 1 ] && { echo "$gtime $md5key" >> $ginvfpath; }
