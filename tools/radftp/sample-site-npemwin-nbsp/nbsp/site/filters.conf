#
# Which nids for nbspradinfo must be piped through nbspunz first.
# (Some sites send nmd,net compressed and others send it uncompressed.
# Some sites send dsp, dvl, eet, zlib compressed. filters.lib
# has a workaround to try to detect that and re-process them, if the
# variable "filterslib(doradinfounzretry)" is set to 1. See below.)
#
# Included are (matched against awips1):
#
#  dpa
#  n0r n1r n2r n3r n0z n0v n1v n0s n1s n2s n3s n1p ncr net nmd nst ntp nvl nvw
#  tr[0-2] 
#
# The following have an uncompressed nids header.
#
# tv0-tv2, tzl, dhr, dsp (+ the hi res below + dual pol next)
# n0q naq n1q nbq n2q n3q n0u nau n1u nbu n2u n3u dvl eet (hi res)
# daa dod dpr dsd dta du3 du6 hhc oha pta n[0-3ab][chkmx] (dual pol)
# (the dual pol will be added between july 2010 and december 2012)
#
# The radar files have wmoid sdus[2-8]. The sdus[235678] are data,
# while 4 are status messages.
#
set filterslib(doradinfowmoid) {sdus[235678]};  # used in filters.lib
set filterslib(doradinfounz) {^$};
set filterslib(doradinfoboth) {^$};  # use {^$} for empty, {} for all
set filterslib(doradinfounzretry) 1; 	  # see above for the meaning
# This actually disables reading the header altogether
set filterslib(noradinfo) {nmd};          # use {^$} for empty

# Whether to report all the (informational) messages that the library
# may emit when processing some of the above files. A typical sequence is:
#
# Apr 25 18:10:59 genstor nbspradinfo: \
#   Invalid pdb header; maybe a zlib compressed header.
# Apr 25 18:10:59 genstor dafilter: \
#   Retrying with zlib compressed kewx_sdus34-ptaewx.252209_107856197.
# Apr 25 18:10:59 genstor dafilter: \
#  OK with zlib compressed kewx_sdus34-ptaewx.252
#
set filterslib(radinfoverbose) 0;
